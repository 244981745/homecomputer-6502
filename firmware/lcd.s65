                    .include "macros.inc65"
                    .include "zeropage.inc65"
                    .include "io.inc65"

                    .export _lcd_init
                    .export _lcd_command
                    .export _lcd_puts
                    .export _lcd_putc
                    .export _lcd_put_newline
                    .export _lcd_goto
                    .export _lcd_clear
                    .export _lcd_cursor_on
                    .export _lcd_cursor_blink
                    .export _lcd_cursor_off
                    .export _lcd_get_x
                    .export _lcd_get_y

                    .import popa
                    .import _delay_ms

                    CMD_CLEARDISPLAY   = $01
                    CMD_RETURNHOME     = $02
                    CMD_ENTRYMODESET   = $04
                    CMD_DISPLAYCONTROL = $08
                    CMD_lcd_cursorSHIFT    = $10
                    CMD_FUNCTIONSET    = $20
                    CMD_SETCGRAMADDR   = $40
                    CMD_SETDDRAMADDR   = $80

                    CTRL_lcd_cursor_DEC    = $00
                    CTRL_lcd_cursor_INC    = $02
                    CTRL_DISPLAY_FIXED = $00
                    CTRL_DISPLAY_MOVE  = $01
                    CTRL_DISPLAY_OFF   = $00
                    CTRL_DISPLAY_ON    = $04
                    CTRL_lcd_cursor_OFF    = $00
                    CTRL_lcd_cursor_ON     = $02
                    CTRL_lcd_cursor_BLINK  = $01
                    CTRL_SHIFT_lcd_cursor  = $00
                    CTRL_SHIFT_DISPLAY = $08
                    CTRL_SHIFT_LEFT    = $00
                    CTRL_SHIFT_RIGHT   = $04
                    CTRL_4BIT          = $00
                    CTRL_8BIT          = $10
                    CTRL_LINES_1       = $00
                    CTRL_LINES_2       = $08
                    CTRL_FONT_5X7      = $00
                    CTRL_FONT_5X10     = $04

                    LCD_D4  = VIA_PA0
                    LCD_D5  = VIA_PA1
                    LCD_D6  = VIA_PA2
                    LCD_D7  = VIA_PA3
                    LCD_RS  = VIA_PA4
                    LCD_EN1 = VIA_PA5
                    LCD_EN2 = VIA_PA6

                    .data

display_data:       .res 4 * 40, ' '

                    .code

; void lcd_init()
; Initialize the LCD
; @mod tmp1
_lcd_init:          phaxy

                    ; IO line setup
                    lda #<(LCD_D4 | LCD_D5 | LCD_D6 | LCD_D7 | LCD_EN1 | LCD_EN2 | LCD_RS)
                    sta VIA1_ORA
                    sta VIA1_DDRA
                    lda #50
                    jsr _delay_ms

                    lda VIA1_ORA
                    and #<~(LCD_EN1 | LCD_EN2 | LCD_RS)
                    sta VIA1_ORA

                    ; Operate on both controllers
                    lda #<(LCD_EN1 | LCD_EN2)
                    sta lcd_enable_bits

                    ; Enable the 4 bit interface
                    lda #$03
                    jsr write_4bits
                    lda #5
                    jsr _delay_ms
                    lda #$03
                    jsr write_4bits
                    lda #1
                    jsr _delay_ms
                    lda #$03
                    jsr write_4bits
                    lda #1
                    jsr _delay_ms
                    lda #$02
                    jsr write_4bits
                    lda #1
                    jsr _delay_ms

                    ; Initial diplay configuration
                    lda #(CMD_FUNCTIONSET| CTRL_4BIT | CTRL_LINES_2 | CTRL_FONT_5X7)
                    jsr command
                    lda #(CMD_DISPLAYCONTROL | CTRL_DISPLAY_OFF)
                    jsr command
                    lda #(CMD_DISPLAYCONTROL | CTRL_DISPLAY_ON | CTRL_lcd_cursor_OFF)
                    jsr command
                    lda #(CMD_ENTRYMODESET | CTRL_lcd_cursor_INC | CTRL_DISPLAY_FIXED)
                    jsr command
                    lda #CMD_CLEARDISPLAY
                    jsr command
                    lda #CMD_RETURNHOME
                    jsr command

                    ; Operate on first controller
                    lda #<(LCD_EN1)
                    sta lcd_enable_bits

                    lda #0
                    sta lcd_row
                    sta lcd_column
                    sta lcd_cursor

                    plaxy
                    rts

; Send the command in A to the LCD
; @mod A, X, Y, tmp1
command:            tax
                    lda VIA1_ORA
                    and #<~LCD_RS
                    sta VIA1_ORA
                    txa
                    jmp send

; Send the data in A to the LCD
; @mod A, X, Y, tmp1
write:              tax
                    lda VIA1_ORA
                    ora #<LCD_RS
                    sta VIA1_ORA
                    txa
                    jmp send

; Send the accu to the LCD
; @mod A, X, Y, tmp1
send:               tay
                    lsr
                    lsr
                    lsr
                    lsr
                    jsr write_4bits
                    tya
                    and #$0f
                    jsr write_4bits
                    rts

; Send A[0..3] to the LCD, assumes A[4..7] = 0
; @mod A, X, tmp1
write_4bits:        sta tmp1
                    lda VIA1_ORA
                    and #$f0
                    ora tmp1
                    sta VIA1_ORA
                    jsr pulse_enable
                    rts

; Send an enable pulse to the LCD
; @mod A, X
pulse_enable:       lda lcd_enable_bits
                    eor #$ff
                    and VIA1_ORA
                    sta VIA1_ORA
                    ldx #50
@delay1:            dex
                    bne @delay1
                    lda lcd_enable_bits
                    ora VIA1_ORA
                    sta VIA1_ORA
                    ldx #200
@delay2:            dex
                    bne @delay2
                    lda lcd_enable_bits
                    eor #$ff
                    and VIA1_ORA
                    sta VIA1_ORA
                    ldx #50
@delay3:            dex
                    bne @delay3
                    rts

; void lcd_command(unsigned char cmd)
; Send a command to the display
; @in A (cmd) The command to send
_lcd_command:       phaxy
                    jsr command
                    plaxy
                    rts

; void lcd_putc(char c)
; Print the character c onto the LCD
; @in A (c) The character to print
; @mod tmp1
_lcd_putc:          phaxy
                    cmp #$0a
                    beq @newline
                    pha
                    jsr write
                    lda lcd_column
                    ldx lcd_row
                    beq @l1
@l2:                clc
                    adc #40
                    dex
                    bne @l2
@l1:                tax
                    pla
                    sta display_data,x
                    inc lcd_column
                    ldx lcd_column
                    cpx #40
                    beq @newline
                    plaxy
                    rts
@newline:           ldy lcd_row
                    cpy #3
                    beq @scroll
                    iny
                    ldx #0
                    jsr goto
                    plaxy
                    rts
@scroll:            ldx #0
                    ldy #0
                    jsr goto
@scroll_line1:      lda display_data + 40,x
                    sta display_data,x
                    phx
                    jsr write
                    plx
                    inx
                    cpx #40
                    bne @scroll_line1
                    ldx #0
                    ldy #1
                    jsr goto
@scroll_line2:      lda display_data + 80,x
                    sta display_data + 40,x
                    phx
                    jsr write
                    plx
                    inx
                    cpx #40
                    bne @scroll_line2
                    ldx #0
                    ldy #2
                    jsr goto
@scroll_line3:      lda display_data + 120,x
                    sta display_data + 80,x
                    phx
                    jsr write
                    plx
                    inx
                    cpx #40
                    bne @scroll_line3
                    ldx #0
                    ldy #3
                    jsr goto
@scroll_line4:      lda #' '
                    sta display_data + 120,x
                    phx
                    jsr write
                    plx
                    inx
                    cpx #40
                    bne @scroll_line4
                    ldx #0
                    ldy #3
                    jsr goto
                    plaxy
                    rts

; void lcd_puts(const char * s)
; Print the zero terminated string s onto the LCD
; @in A/X (s) Pointer to the zero terminated string
; @mod tmp1, tmp2, ptr1
_lcd_puts:          phaxy
                    sta ptr1
                    stx ptr1 + 1
                    ldy #0
@next_char:         sty tmp2
                    lda (ptr1),y
                    beq @eos
                    jsr _lcd_putc
                    ldy tmp2
                    iny
                    bne @next_char
@eos:               plaxy
                    rts

; void lcd_put_newline()
; Print a newline character
_lcd_put_newline:   pha
                    lda #$0a
                    jsr _lcd_putc
                    pla
                    rts

; Set the cursor the position X (column) and Y (row)
; X must be in the range 0..39 and Y in 0..3
; @mod tmp1
goto:               phaxy
                    stx lcd_column
                    sty lcd_row
                    lda #(CMD_DISPLAYCONTROL | CTRL_DISPLAY_ON | CTRL_lcd_cursor_OFF)
                    jsr command
                    ldy lcd_row
                    lda row_enables,y
                    sta lcd_enable_bits
                    lda lcd_column
                    clc
                    adc row_offsets,y
                    adc #CMD_SETDDRAMADDR
                    jsr command
                    lda lcd_cursor
                    ora #(CMD_DISPLAYCONTROL | CTRL_DISPLAY_ON)
                    jsr command
                    plaxy
                    rts

row_offsets:        .byte $00, $40, $00, $40
row_enables:        .byte LCD_EN1, LCD_EN1, LCD_EN2, LCD_EN2

; lcd_goto(unsigned char x, unsigned char y)
; Set the cursor to the position x/y
; @in popa (x) The column
; @in A (y) The row
_lcd_goto:          phxy
                    sta tmp1
                    jsr popa
                    tax
                    ldy tmp1
                    jsr goto
                    plxy
                    rts

; void lcd_clear()
; Clear the display
_lcd_clear:         phaxy
                    lda #<(LCD_EN1 | LCD_EN2)
                    sta lcd_enable_bits
                    lda #CMD_CLEARDISPLAY
                    jsr command
                    ldx #0
                    ldy #0
                    jsr goto
                    ldx #(4 * 40 - 1)
                    lda #' '
@clear:             sta display_data,x
                    dex
                    bpl @clear
                    plaxy

; void lcd_cursor_on()
; Show the cursor
_lcd_cursor_on:     phaxy
                    lda #CTRL_lcd_cursor_ON
                    sta lcd_cursor
                    ora #(CMD_DISPLAYCONTROL| CTRL_DISPLAY_ON)
                    jsr command
                    plaxy
                    rts

; void lcd_cursor_blink()
; Show a blinking cursor
_lcd_cursor_blink:  phaxy
                    lda #(CTRL_lcd_cursor_ON | CTRL_lcd_cursor_BLINK)
                    sta lcd_cursor
                    ora #(CMD_DISPLAYCONTROL| CTRL_DISPLAY_ON)
                    jsr command
                    plaxy
                    rts

; lcd_cursor_off()
; Hide the cursor
_lcd_cursor_off:    phaxy
                    lda #CTRL_lcd_cursor_OFF
                    sta lcd_cursor
                    ora #(CMD_DISPLAYCONTROL| CTRL_DISPLAY_ON)
                    jsr command
                    plaxy
                    rts

; void unsigned char get_x()
; Get the current display column
; @out A column
_lcd_get_x:         lda lcd_column
                    rts

; void unsigned char get_y()
; Get the current display row
; @out A row
_lcd_get_y:         lda lcd_row
                    rts
